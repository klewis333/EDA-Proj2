plot(x, y)
plot(x, z)
plot(y,z)
plot(y, x)
par(mfrow = c(1,1))
plot(x, y, type = "n")
plot(data$Global_active_power, data$Time, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(data$Time, data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(data$Time, data$Global_active_power, col = "black", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Global_active_power, col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Global_active_power, type = l, col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Global_active_power, type = "l", col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
with(data, {
plot(Sub_metering_1~Time, type = "1", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, {
plot(Sub_metering_1~Time, type = "1", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
plot(Sub_metering_1~Time, type = "1", ylab="Global Active Power (kilowatts)", xlab = "")
datasmall$Time <- as.POSIXct(Time)
data$Time <- as.POSIXct(Time)
with(data, {
plot(Sub_metering_1~Time, type = "1", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, {
plot(Sub_metering_1~Time, ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, {
plot(Sub_metering_1~Time, type = "1", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
par(type = "1")
with(data, {
plot(Sub_metering_1~Time, ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?par
plot(data$Time, data$Sub_metering_1, type = "1", ylab = "Energy Submetering", xlab = "")
summary(Sub_metering_1)
summary(data$Sub_metering_1)
with(data, {
plot(Sub_metering_1~Time, ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
with(data, {
plot(Sub_metering_1~Time, type=1, ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
with(data, {
plot(Sub_metering_1~Time, type="1", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_2~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Global Active Power (kilowatts)", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
par(mfrow = c(2,2))
plot(data$Time, data$Global_active_power, type = "l", col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Voltage, type = "l", col = "black", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$Time, data$Global_reactive_power, type = "l", col = "black", xlab = "datetime", ylab = "Global_reactive_power")
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
#save plot to a png file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
par(mfrow = c(2,2))
plot(data$Time, data$Global_active_power, type = "l", col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Voltage, type = "l", col = "black", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2, bty = "n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$Time, data$Global_reactive_power, type = "l", col = "black", xlab = "datetime", ylab = "Global_reactive_power")
par(mfrow = c(2,2), mar = c(4, 4, 2, 1), oma=c(0,0,2,0))
plot(data$Time, data$Global_active_power, type = "l", col = "black", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Time, data$Voltage, type = "l", col = "black", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2, bty = "n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$Time, data$Global_reactive_power, type = "l", col = "black", xlab = "datetime", ylab = "Global_reactive_power")
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
with(data, {
plot(Sub_metering_1~Time, type="l", ylab="Energy sub metering", xlab = "")
lines(Sub_metering_2~Time, col = "red")
lines(Sub_metering_3~Time, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x <- x[sample(1:5),]; x$var2[c(1,3)]=NA
x
x
x[,1]
x[,"var1"]
x[1,:2,"var2"]
x[1:2,"var2"]
x[(x$var1 <= 3 & x$var3 > 11),]
x[which(x$var2 >1)]
x[which(x$var2 >1),]
sort(x$var1)
x[order(x$var1),]
x[order(desc((x$var1)),]
x[order(desc(x$var1)),]
library(plyr)
library(dplyr)
x$var4 <- rnorm(5)
x
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="/restaurants.csv")
restData <- read.csv("/restaurants.csv")
download.file(fileUrl,destfile="restaurants.csv")
restData <- read.csv("restaurants.csv")
head(restData, n=3)
restdata <- restData
rm(restData)
tail(restdata, n=3)
summary(restdata)
str(restdata)
summary(restdata$councilDistrict)
mean(restdata$councilDistrict)
quantile(restdata$councilDistrict)
quantile(restdata$councilDistrict, probs=c(.5,.9))
table(restdata$name)
any(!is.na(restdata$councilDistrict))
colSums(is.na(restdata))
restdata[restdata$zipCode %in% c("21212"),]
data(UCBAdmissions)
df = as.data.frame(UCBAdmissions)
xtabs(Freq~Gender + Admit, data=df)
object.size(df)
rest<-restdata
rm(restdata)
s1 <- seq(1,10, by = 5) ; s1
s1 <- seq(1,10, by = 1) ; s1
rest$nearme = rest$neighborhood %in% c("Roland Park", "Homeland")
knitr?
?knitr
library(knitr)
?knitr
knit2html("CodeBook.md")
setwd("C:/Users/Karyn/Dropbox/Data Science/R stuff")
#Indicates where files are located
proj_files <- file.path("C:/Users/Karyn/Dropbox/Data Science/R stuff/UCI HAR Dataset")
#Input the relevant data files as tables
dataActivityTest  <- read.table(file.path(proj_files, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(proj_files, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(proj_files, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(proj_files, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(proj_files, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(proj_files, "train", "X_train.txt"),header = FALSE)
#Merge rows for same variable type
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
#name the variables in the concatenated files
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
#merge all data into a data frame
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
#Extract means and sds for each measure and subset data by selected aspects
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
#Give vars names with descriptive titles
names(Data)<-gsub("^t", "Time", names(Data))
names(Data)<-gsub("^f", "Frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
#tidy things up with a small cleaned data set
library(plyr);
TidyData<-aggregate(. ~subject + activity, Data, mean)
TidyData<-TidyData[order(TidyData$subject,TidyData$activity),]
write.table(TidyData, file = "tidydata.txt",row.name=FALSE)
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
setwd("C:/Users/Karyn/Dropbox/Data Science/R stuff")
#Indicates where files are located
proj_files <- file.path("C:/Users/Karyn/Dropbox/Data Science/R stuff/UCI HAR Dataset")
#Input the relevant data files as tables
dataActivityTest  <- read.table(file.path(proj_files, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(proj_files, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(proj_files, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(proj_files, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(proj_files, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(proj_files, "train", "X_train.txt"),header = FALSE)
#Merge rows for same variable type
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
#name the variables in the concatenated files
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(proj_files, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
#merge all data into a data frame
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
#Extract means and sds for each measure and subset data by selected aspects
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(proj_files, "activity_labels.txt"),header = FALSE)
#Give vars names with descriptive titles
names(Data)<-gsub("^t", "Time", names(Data))
names(Data)<-gsub("^f", "Frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
#tidy things up with a small cleaned data set
library(plyr);
TidyData<-aggregate(. ~subject + activity, Data, mean)
TidyData<-TidyData[order(TidyData$subject,TidyData$activity),]
write.table(TidyData, file = "tidydata.txt",row.name=FALSE)
setwd("C:/Users/Karyn/Dropbox/Data Science/R stuff/Getting and Cleaning Data Project")
#Indicates where files are located
proj_files <- file.path("C:/Users/Karyn/Dropbox/Data Science/R stuff/Getting and Cleaning Data Project/UCI HAR Dataset")
dataActivityTest  <- read.table(file.path(proj_files, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(proj_files, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(proj_files, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(proj_files, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(proj_files, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(proj_files, "train", "X_train.txt"),header = FALSE)
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(proj_files, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(proj_files, "activity_labels.txt"),header = FALSE)
names(Data)<-gsub("^t", "Time", names(Data))
names(Data)<-gsub("^f", "Frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
library(plyr);
TidyData<-aggregate(. ~subject + activity, Data, mean)
TidyData<-TidyData[order(TidyData$subject,TidyData$activity),]
write.table(TidyData, file = "tidydata.txt",row.name=FALSE)
setwd(C:/Users/Karyn/Dropbox/Data Science/R stuff/Exploratory Data Analysis/EDA Project 2)
setwd("C:/Users/Karyn/Dropbox/Data Science/R stuff/Exploratory Data Analysis/EDA Project 2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
dir()
summary(NEI$Pollutant)
summary(NEI$year)
MeanYearlyEmiss <- aggregate(Emissions ~ year, NEI, sum)
MeanYearlyEmiss
MeanYearlyEmiss <- aggregate(NEI[c("Emissions")], list(year = NEI$year), sum)
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = "Total PM[2.5] Emissions",
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = "Total PM[2.5] Emissions",
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = "Total PM'[2.5]*' Emissions",
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = "total PM'[2.5]*' emission",
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = "total PM'[2.5]*' emission",
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('total PM'[2.5]*' emission'),
xlab = "Year", ylab = "Emissions")
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('Total PM'[2.5]*' Emissions'),
xlab = "Year", ylab = "Emissions")
png('Plot1.png', width=480, height=480)
dev.off()
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('Total PM'[2.5]*' Emissions'),
xlab = "Year", ylab = "Emissions")
png('Plot1.png', width=480, height=480)
dev.off()
png('Plot1.png', width=480, height=480)
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('Total PM'[2.5]*' Emissions'),
xlab = "Year", ylab = "Emissions")
dev.off()
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('Total PM'[2.5]*' Emissions'),
xlab = "Year", ylab = "Emissions")
dev.off()
png('Plot1.png', width=480, height=480)
dev.off()
plot(MeanYearlyEmiss$year, MeanYearlyEmiss$Emissions, type = "l",
main = expression('Total PM'[2.5]*' Emissions'),
xlab = "Year", ylab = "Emissions")
png('Plot1.png', width=480, height=480)
dev.off()
barplot(height = MeanYearlyEmiss$Emissions, names.arg = MeanYearlyEmiss$year,
main = expression('Total PM'[2.5]*' Emissions by Year'),
xlab = "Year", ylab = "Emissions")
png('Plot1.png', width=480, height=480)
dev.off()
png('plot1.png')
barplot(height = MeanYearlyEmiss$Emissions, names.arg = MeanYearlyEmiss$year,
main = expression('Total PM'[2.5]*' Emissions by Year'),
xlab = "Year", ylab = "Emissions")
dev.off()
png('plot1.png')
barplot(height = MeanYearlyEmiss$Emissions, names.arg = MeanYearlyEmiss$year,
main = expression('Total PM'[2.5]*' Emissions by Year'),
xlab = "Year", ylab = "Emissions")
dev.off()
barplot(height = MeanYearlyEmiss$Emissions, names.arg = MeanYearlyEmiss$year,
main = expression('Total PM'[2.5]*' Emissions by Year'),
xlab = "Year", ylab = "Emissions")
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
baltimoreNEI <- NEI[NEI$fips=="24510",]
MeanYearlyEmissBalt <- aggregate(baltimoreNEI[c("Emissions")], list(year = baltimoreNEI$year), sum)
barplot(height = MeanYearlyEmissBalt$Emissions, names.arg = MeanYearlyEmissBalt$year,
main = expression('Total PM'[2.5]*' Emissions by Year in Baltimore City'),
xlab = "Year", ylab = "Emissions")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
library(ggplot2)
plot3 <- ggplot(baltimoreNEI, aes(factor(year), Emissions, fill=type)) +
geom_bar(stat = "identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type, scales = "free", space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
print(plot3)
plot3 <- ggplot(baltimoreNEI, aes(factor(year), Emissions, fill=type)) +
geom_bar(stat = "identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type, scales = "free", space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission")) +
labs(title=expression("PM"[2.5]*" Emissions in Baltimore City (1999-2008) by Source Type"))
print(plot3)
plot3 <- ggplot(baltimoreNEI, aes(factor(year), Emissions, fill=type)) +
geom_bar(stat = "identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type, scales = "free", space="free") +
labs(x="year", y=expression("PM"[2.5]*" Emission")) +
labs(title=expression("PM"[2.5]*" Emissions in Baltimore City (1999-2008) by Source Type"))
print(plot3)
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
plot3 <- ggplot(baltimoreNEI, aes(factor(year), Emissions, fill=type)) +
geom_bar(stat = "identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type, scales = "free", space="free") +
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions in Baltimore City (1999-2008) by Source Type"))
print(plot3)
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
View(NEI)
View(baltimoreNEI)
View(SCC)
NEISCC <- merge(NEI, SCC, by="SCC")
coal <- grepl("coal", NEISCC$Short.Name, ignore.case=TRUE)
coalNEISCC <- NEISCC[coal, ]
MeanYearlyCoalEmiss <- aggregate(Emissions ~ year, coalNEISCC, sum)
library(ggplot2)
plot4 <- ggplot(MeanYearlyCoalEmiss, aes(factor(year), Emissions)) +
geom_bar(stat="identity") +
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Coal Sources by Year"))
print(plot4)
plot4 <- ggplot(MeanYearlyCoalEmiss, aes(factor(year), Emissions)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Coal Sources by Year"))
print(plot4)
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
MV <- grepl("Highway Veh", NEISCC$Short.Name, ignore.case=TRUE)
MVNEISCC <- NEISCC[MV, ]
MVNEISCCBC <- MVNEISCC[MVNEISCC$fips=="24510",]
MeanYearlyMVEmissBC <- aggregate(Emissions ~ year, MVNEISCCBC, sum)
plot5 <- ggplot(MeanYearlyMVEmissBC, aes(factor(year), Emissions)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehicle Sources in Baltimore City by Year"))
print(plot5)
dev.copy(png, file="plot5.png", height=480, width=480)
dev.off()
MVNEISCCBC <- MVNEISCC[MVNEISCC$fips=="24510",]
MVNEISCCBC$City <- "Baltimore City"
MVNEISCCLA <- MVNEISCC[MVNEISCC$fips=="06037",]
MVNEISCCLA$City <- "Los Angeles"
MVNEISCCBCandLA <- rbind(MVNEISCCBC, MVNEISCCLA)
plot6 <- ggplot(MVNEISCCBCandLA, aes(x=factor(year), y=Emissions, fill=City)) +
geom_bar(aes(fill=year), stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(scales="free", space="free", .~city) +
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehicle Sources in Baltimore City and Los Angeles by Year"))
print(plot6)
plot6 <- ggplot(MVNEISCCBCandLA, aes(x=factor(year), y=Emissions, fill=City)) +
geom_bar(aes(fill=year), stat="identity") +
facet_grid(scales="free", space="free", .~city) +
theme_bw() + guides(fill=FALSE)+
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehicle Sources in Baltimore City and Los Angeles by Year"))
print(plot6)
plot6 <- ggplot(MVNEISCCBCandLA, aes(x=factor(year), y=Emissions, fill=City)) +
geom_bar(aes(fill=year), stat="identity") +
facet_grid(scales="free", space="free", .~City) +
theme_bw() + guides(fill=FALSE)+
labs(x="Year", y=expression("PM"[2.5]*" Emissions")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehicle Sources in Baltimore City and Los Angeles by Year"))
print(plot6)
dev.copy(png, file="plot6.png", height=480, width=480)
dev.off()
dev.copy(png, file="plot6.png", height=480, width=620)
dev.off()
